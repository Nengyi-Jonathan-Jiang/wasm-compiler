{"version":3,"file":"shared.js","sourceRoot":"","sources":["shared.ts"],"names":[],"mappings":"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","sourcesContent":["class _map<T, U> {\r\n    readonly map = new Map<string, U>;\r\n\r\n    public add(key: T, value: U) {\r\n        let res = !this.has(key);\r\n        this.map.set(key.toString(), value);\r\n        return res;\r\n    }\r\n\r\n    public has(key: T) {\r\n        return this.map.has(key.toString());\r\n    }\r\n\r\n    public get(key: T): U {\r\n        return this.map.get(key.toString());\r\n    }\r\n\r\n    public get size() {\r\n        return this.map.size\r\n    }\r\n\r\n    public [Symbol.iterator](){\r\n        return this.map.values();\r\n    }\r\n}\r\n\r\nclass SSet<T> {\r\n    private readonly map : Map<string, T>;\r\n    private str : string;\r\n    private dirty: boolean;\r\n\r\n    constructor(...values: T[]) {\r\n        this.map = new Map<string, T>();\r\n        values.forEach(val => this.map.set(val.toString(), val));\r\n        this.dirty = true;\r\n    }\r\n\r\n    static from<T>(...sets: SSet<T>[]) : SSet<T> {\r\n        const res = new SSet<T>();\r\n        for(const set of sets)\r\n            for(const [key, value] of set.map)\r\n                res.map.set(key, value);\r\n        return res;\r\n    }\r\n\r\n    public add(value: T) {\r\n        const str = value.toString();\r\n        const res = !this.map.has(str);\r\n        this.map.set(str, value);\r\n        this.dirty ||= res;\r\n        return res;\r\n    }\r\n\r\n    public addAll(...values: T[]) {\r\n        let res = false;\r\n        for (const val of values) {\r\n            const str = val.toString();\r\n            res ||= !this.map.has(str);\r\n            this.map.set(str, val);\r\n        }\r\n        this.dirty ||= res;\r\n        return res;\r\n    }\r\n\r\n    public has(value: T) {\r\n        return this.map.has(value.toString());\r\n    }\r\n\r\n    public [Symbol.iterator](){\r\n        return this.map.values()\r\n    }\r\n\r\n    public forEach(func : (value: T) => any){\r\n        for(let value of this.map.values()){\r\n            func(value);\r\n        }\r\n    }\r\n\r\n    public get size() {\r\n        return this.map.size\r\n    }\r\n\r\n    public toString() {\r\n        if(this.dirty){\r\n            this.str = `${[...this].sort().join(\"\\0\")}`;\r\n            this.dirty = false;\r\n        }\r\n        return this.str;\r\n    }\r\n}\r\n\r\nclass SMap<T, U> {\r\n\r\n    private readonly map: _map<T, [T, U]> = new _map<T, [T, U]>();\r\n\r\n    constructor(...entries: [T, U][]) {\r\n        this.addAll(...entries);\r\n    }\r\n\r\n    public add(key: T, value: U) {\r\n        return this.map.add(key, [key, value]);\r\n    }\r\n\r\n    public addAll(...entries: [T, U][]) {\r\n        return entries.map(([key, value]) => this.add(key, value)).some(i => i);\r\n    }\r\n\r\n    public has(key: T) {\r\n        return this.map.has(key);\r\n    }\r\n\r\n    public get(key: T) {\r\n        return this.map.get(key)?.[1];\r\n    }\r\n\r\n    public [Symbol.iterator] = () => this.map[Symbol.iterator]()\r\n\r\n    public get size() {\r\n        return this.map.size\r\n    }\r\n\r\n    public toString() {\r\n        return `{${[...this].map(([key, value]) => `${key} => ${value}`).join(\", \")}}`\r\n    }\r\n}\r\n\r\nclass TokenType {\r\n    public static compressName = false;\r\n    private static instances: SMap<string, TokenType> = new SMap<string, TokenType>();\r\n    public readonly name: string;\r\n    public readonly pattern: RegExp;\r\n\r\n    public static create(name: string, pattern: RegExp = null) {\r\n        return this.instances.get(name) || new TokenType(name, pattern);\r\n    }\r\n    private constructor(name: string, pattern: RegExp) {\r\n        this.name = name;\r\n        this.pattern = pattern;\r\n\r\n        TokenType.instances.add(name, this);\r\n    }\r\n\r\n    public toString = () => this.name;\r\n\r\n    public static readonly START = new TokenType(\"__START__\", /^(?!x)x$/);\r\n    public static readonly END = new TokenType(\"__END__\", /^(?!x)x$/);\r\n    public static readonly EPSILON = new TokenType(\"ε\", /^(?!x)x$/);\r\n    public static readonly UNKNOWN = new TokenType(\"__ERROR__\", /^(?!x)x$/);\r\n}\r\n\r\nclass Token {\r\n    public readonly symbol: TokenType;\r\n    public readonly value: string;\r\n    public readonly start: number;\r\n    public readonly end: number;\r\n\r\n    constructor(symbol: TokenType, value: string, start: number, end: number) {\r\n        this.symbol = symbol;\r\n        this.value = value;\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n\r\n    public toString = () => this.symbol.toString() == this.value\r\n        ? `\"${this.symbol}\"`\r\n        : `${this.symbol}<${this.value}>`\r\n}\r\n\r\nclass SymbolString {\r\n    public readonly symbols: TokenType[];\r\n    private readonly str: string;\r\n\r\n    constructor(...symbols: TokenType[]) {\r\n        this.symbols = symbols;\r\n        this.str = symbols.map(i => i.toString()).join(\" \");\r\n    }\r\n\r\n    public get length() {\r\n        return this.symbols.length\r\n    }\r\n\r\n    public toString = () => this.str\r\n\r\n    public get = (i: number) => this.symbols[i < 0 ? i + this.length : i]\r\n\r\n    public [Symbol.iterator] = () => this.symbols[Symbol.iterator]();\r\n\r\n    public substr(start: number = 0, end: number = -1) {\r\n        return new SymbolString(...this.symbols.slice(start, end + (end < 0 ? this.length + 1 : 0)));\r\n    }\r\n\r\n    public concatSymbol = (symbol: TokenType) => new SymbolString(...this, symbol);\r\n    public concat = (symbols: SymbolString) => new SymbolString(...this, ...symbols);\r\n}\r\n\r\nabstract class AST {\r\n    public readonly description: TokenType;\r\n    protected readonly _children: AST[];\r\n    protected readonly _value: Token;\r\n\r\n    protected constructor(description: TokenType, value: Token, ...children: AST[]) {\r\n        this.description = description;\r\n        this._children = children;\r\n        this._value = value;\r\n    }\r\n\r\n    public abstract get children(): AST[];\r\n\r\n    public abstract get value(): Token;\r\n\r\n    public [Symbol.iterator] = () => this.children[Symbol.iterator]()\r\n\r\n    public get isLeaf() {\r\n        return this._value !== null;\r\n    }\r\n\r\n    public static Node = class Node extends AST {\r\n        constructor(description: TokenType, ...children: AST[]) {\r\n            super(description, null, ...children);\r\n        }\r\n\r\n        get children(): AST[] {\r\n            return this._children;\r\n        }\r\n\r\n        get value(): Token {\r\n            throw new Error(\"Cannot access value of non-leaf node\");\r\n        }\r\n\r\n        public toString() {\r\n            return `${\r\n                this.description\r\n            } {${\r\n                this.children.length == 0 ? \"\" : `\\n    ${\r\n                    this.children.map(i => i.toString()).join(\"\\n\").replaceAll(/\\n/g, \"\\n    \")\r\n                }`\r\n            }\\n}`;\r\n        }\r\n    }\r\n\r\n    public static Leaf = class Leaf extends AST {\r\n        constructor(description: TokenType, value: Token) {\r\n            super(description, value);\r\n        }\r\n\r\n        get children(): AST[] {\r\n            throw new Error(\"Cannot access children of leaf node\");\r\n        }\r\n\r\n        get value(): Token {\r\n            return this._value;\r\n        }\r\n\r\n        public toString = () => this.value\r\n    }\r\n}"]}